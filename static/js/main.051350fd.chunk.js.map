{"version":3,"sources":["List.js","Control.js","App.js","serviceWorker.js","index.js"],"names":["List","getJson","json","require","setState","state","getFireData","handleJsonChange","bind","ref","firebase","database","self","this","orderByKey","on","snapshot","val","li","slice","push","contentsList","count","i","contents","key","index","length","className","React","Component","ListContents","props","flg","id","question","choices","answer","unit","list","choiceList","map","choice","comments","commentList","comment","onClick","openAnswer","url","Control","handleChange","event","target","choicesChengeHandler","deleteChoiceHandler","addFireData","value","name","onChange","e","Date","getTime","split","clear","replace","changeChoice","deleteChoice","createAnswer","type","addChoices","Choices","ControlQuestion","deleteQuestion","remove","defaultPath","App","path","exact","component","Header","to","Footer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.051350fd.chunk.js","sourcesContent":["import React from 'react';\r\nimport firebase from \"firebase\";\r\n\r\nexport default class List extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            json: []\r\n        };\r\n        this.getFireData();\r\n        this.handleJsonChange = this.handleJsonChange.bind(this);\r\n    }\r\n\r\n    getFireData(){\r\n        let db = firebase.database();\r\n        let ref = db.ref('contentslist');\r\n        let self = this;\r\n        ref.orderByKey().on('value',(snapshot)=>{\r\n            self.setState({\r\n                json:snapshot.val()\r\n            })\r\n        })\r\n    }\r\n\r\n    handleJsonChange(json) {\r\n        let li = this.state.json.slice();\r\n        li.push(json);\r\n        this.setState({ json: li })\r\n    }\r\n\r\n    contentsList() {\r\n        let contentsList = [];\r\n        let count = 0;\r\n        for(let i in this.state.json){\r\n            const contents = this.state.json[i]\r\n            contentsList.push(\r\n                <ListContents key={i} contents={contents} index={count++} />\r\n            )\r\n        }\r\n        return contentsList;\r\n    }\r\n\r\n    render() {\r\n        if(this.state.json.length === 0){\r\n            this.getFireData();\r\n        }\r\n\r\n        return (\r\n            <div className=\"contentsList\">\r\n                {this.state.json.length === 0 || this.state.json == null\r\n                    ? <p>データがありません</p> : this.contentsList()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillMount() {\r\n        // this.getJson();\r\n    }\r\n\r\n    getJson = () => {\r\n        const json = require(\"./contents.json\");\r\n        this.setState({\r\n            json: json\r\n        });\r\n    }\r\n}\r\n\r\nclass ListContents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            flg: false,\r\n            contents: props.contents,\r\n            index: props.index\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { contents, index } = this.state\r\n        return (\r\n            <div className=\"contents content\" id={index}>\r\n                {this.question(contents, index)}\r\n                {this.choices(contents.choices)}\r\n                {this.answer(contents, index)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    question(contents, index) {\r\n        const question = (\r\n            <div className=\"question\">\r\n                <p><strong>問題{index + 1} ({contents.unit})</strong></p>\r\n                <p>{contents.question}</p>\r\n            </div>\r\n        )\r\n        return question;\r\n    }\r\n\r\n    choices(list) {\r\n        const choiceList = list.map((choice, index) => {\r\n            return (\r\n                <li key={index}>{index+1}: {choice}</li>\r\n            );\r\n        });\r\n        const choices = (\r\n            <div className=\"choices\">\r\n                <ul>{choiceList}</ul>\r\n            </div>\r\n        )\r\n\r\n        return choices\r\n    }\r\n\r\n    comment(comments){\r\n        const commentList = comments.map((comment, index) => {\r\n            return(\r\n            <span key={index}>{index !== 0 && <br/>}{comment}</span>\r\n            )\r\n        });\r\n        return(\r\n            <span>{commentList}</span>\r\n        )\r\n    }\r\n\r\n    answer(contents, index) {\r\n        const flg = this.state.flg;\r\n\r\n        const answer = (\r\n            <div className=\"answer\">\r\n                <button className=\"button is-info\" onClick={() => { this.openAnswer() }}>回答</button>\r\n                {flg &&\r\n                    <div className=\"commentary\">\r\n                        <p>答え： {contents.answer}</p>\r\n                        <p>解説：<br />{this.comment(contents.comment)}</p>\r\n                        <p>{contents.url}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n        return answer;\r\n    }\r\n\r\n    openAnswer() {\r\n        const flg = this.state.flg;\r\n        this.setState({\r\n            flg: !flg\r\n        })\r\n    }\r\n}","import React from 'react';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\n\r\nexport default class Control extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.choicesChengeHandler = this.choicesChengeHandler.bind(this);\r\n        this.deleteChoiceHandler = this.deleteChoiceHandler.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addFireData = this.addFireData.bind(this);\r\n        this.state = {\r\n            id: -1,\r\n            unit: \"Java\",\r\n            question: \"\",\r\n            choices: [\"\", \"\", \"\", \"\", \"\"],\r\n            answer: 1,\r\n            comment: [],\r\n            url: \"\",\r\n            json: []\r\n        }\r\n    }\r\n\r\n    choicesChengeHandler(index, choice) {\r\n        let choices = this.state.choices.slice();\r\n        choices[index] = choice;\r\n        this.setState({ choices })\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            unit: event.target.unit,\r\n            question: event.target.question,\r\n            answer: event.target.answer,\r\n            comment: event.target.answer\r\n        })\r\n    }\r\n\r\n    addChoices() {\r\n        let choices = this.state.choices.slice();\r\n        choices.push(\"\");\r\n        this.setState({ choices })\r\n    }\r\n\r\n    deleteChoiceHandler(index) {\r\n        let choices = this.state.choices.slice();\r\n        choices = [...choices.slice(0, index), ...choices.slice(index + 1)]\r\n        this.setState({ choices })\r\n    }\r\n\r\n    createAnswer() {\r\n        const choiceList = this.state.choices;\r\n        const answer = choiceList.map((choice, index) => {\r\n            return (\r\n                <option key={index} value={index + 1}>{index + 1}</option>\r\n            )\r\n        });\r\n        return (\r\n            <select name=\"answer\" value={this.state.answer}\r\n                onChange={(e) => this.setState({ answer: e.target.value })}>\r\n                {answer}\r\n            </select>\r\n        );\r\n    }\r\n\r\n    clear(){\r\n        this.setState({\r\n            unit: \"Java\",\r\n            question: \"\",\r\n            choices: [\"\", \"\", \"\", \"\", \"\"],\r\n            answer: 1,\r\n            comment: [],\r\n            url: \"\",\r\n            json: []\r\n        })\r\n    }\r\n\r\n    // データ追加処理\r\n    addFireData() {\r\n        let id = new Date().getTime();\r\n        let db = firebase.database();\r\n        let ref = db.ref(\"contentslist\");\r\n        let comment = this.state.comment;\r\n        ref.push({\r\n            id: id,\r\n            unit: this.state.unit || '',\r\n            question: this.state.question || '',\r\n            choices: this.state.choices || '',\r\n            answer: this.state.answer || '',\r\n            comment: comment.split('\\n') || '',\r\n            url: this.state.url || ''\r\n        })\r\n        this.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"addQuestion\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>単元</th>\r\n                                <th>\r\n                                    <select name=\"unit\" value={this.state.unit}\r\n                                        onChange={(e) => this.setState({ unit: e.target.value })}>\r\n                                        <option value=\"Java\">Java</option>\r\n                                        <option value=\"Oracle\">Oracle</option>\r\n                                        <option value=\"HTML/CSS\">HTML/CSS</option>\r\n                                    </select>\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>問題文</th>\r\n                                <th>\r\n                                    <textarea name=\"question\" value={this.state.question}\r\n                                        onChange={(e) => this.setState({ question: e.target.value.replace(/\\r?\\n/g,\"\") })} />\r\n                                </th>\r\n                            </tr>\r\n                            {this.state.choices.map((choice, index) => (\r\n                                <Choices key={index} index={index} choice={choice}\r\n                                    changeChoice={this.choicesChengeHandler} deleteChoice={this.deleteChoiceHandler} />\r\n                            ))}\r\n                            <tr>\r\n                                <th>答え</th>\r\n                                <th>\r\n                                    {this.createAnswer()}\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>解説</th>\r\n                                <th>\r\n                                    <textarea name=\"comment\" value={this.state.comment}\r\n                                        onChange={(e) => this.setState({ comment: e.target.value })} />\r\n                                </th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>URL</th>\r\n                                <th>\r\n                                    <input type=\"text\" name=\"url\" value={this.state.url}\r\n                                        onChange={(e) => this.setState({ url: e.target.value })} />\r\n                                </th>\r\n                            </tr>\r\n\r\n                        </tbody>\r\n                    </table>\r\n                    <button onClick={() => { this.addChoices() }}>選択肢を増やす</button>\r\n                    <button onClick={() => { this.clear() }}>クリア</button>\r\n                    <button onClick={this.addFireData}>追加</button>\r\n                </div>\r\n                <ControlQuestion />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Choices extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.changeChoice = this.changeChoice.bind(this);\r\n        this.deleteChoice = this.deleteChoice.bind(this);\r\n    }\r\n\r\n    changeChoice(e) {\r\n        this.props.changeChoice(this.props.index, e.target.value);\r\n    }\r\n\r\n    deleteChoice(index) {\r\n        this.props.deleteChoice(index);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <th>{this.props.index + 1}</th>\r\n                <th>\r\n                    <input type=\"text\" value={this.props.choice} onChange={this.changeChoice} />\r\n                    <button onClick={() => { this.deleteChoice(this.props.index) }}>削除</button>\r\n                </th>\r\n            </tr>\r\n        )\r\n    }\r\n}\r\n\r\nclass ControlQuestion extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            json: []\r\n        };\r\n        this.getFireData();\r\n    }\r\n\r\n    getFireData(){\r\n        let db = firebase.database();\r\n        let ref = db.ref('contentslist');\r\n        let self = this;\r\n        ref.orderByKey().on('value',(snapshot)=>{\r\n            self.setState({\r\n                json:snapshot.val()\r\n            })\r\n        })\r\n    }\r\n\r\n    contentsList() {\r\n        let contentsList = [];\r\n        for(let i in this.state.json){\r\n            const contents = this.state.json[i]\r\n            contentsList.push(\r\n                <ListContents key={i} contents={contents} index={i}  />\r\n            )\r\n        }\r\n        return contentsList;\r\n    }\r\n\r\n    render() {\r\n        if(this.state.json.length === 0){\r\n            this.getFireData();\r\n        }\r\n\r\n        return (\r\n            <div className=\"contentsList\">\r\n                {this.state.json.length === 0 || this.state.json == null\r\n                    ? <p>データがありません</p> : this.contentsList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass ListContents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.deleteQuestion = this.deleteQuestion.bind(this);\r\n    }\r\n\r\n    deleteQuestion(){\r\n        let id = this.props.index;\r\n        let db = firebase.database();\r\n        let ref = db.ref(\"contentslist/\" + id);\r\n        ref.remove();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contents content\" id={this.props.index}>\r\n                {this.question(this.props.contents, this.props.index)}\r\n                {this.choices(this.props.contents.choices)}\r\n                {this.answer(this.props.contents, this.props.index)}\r\n                <button className=\"button is-info\" onClick={() => { this.deleteQuestion() }}>削除</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    question(contents, index) {\r\n        const question = (\r\n            <div className=\"question\">\r\n                <p><strong>問題ID:{index} ({contents.unit})</strong></p>\r\n                <p>{contents.question}</p>\r\n            </div>\r\n        )\r\n        return question;\r\n    }\r\n\r\n    choices(list) {\r\n        const choiceList = list.map((choice, index) => {\r\n            return (\r\n                <li key={index}>{index+1}: {choice}</li>\r\n            );\r\n        });\r\n        const choices = (\r\n            <div className=\"choices\">\r\n                <ul>{choiceList}</ul>\r\n            </div>\r\n        )\r\n\r\n        return choices\r\n    }\r\n\r\n    comment(comments){\r\n        const commentList = comments.map((comment, index) => {\r\n            return(\r\n            <span key={index}>{index !== 0 && <br/>}{comment}</span>\r\n            )\r\n        });\r\n        return(\r\n            <span>{commentList}</span>\r\n        )\r\n    }\r\n\r\n    answer(contents, index) {\r\n        const answer = (\r\n            <div className=\"answer\">\r\n                    <div className=\"commentary\">\r\n                        <p>答え： {contents.answer}</p>\r\n                        <p>解説：<br />{this.comment(contents.comment)}</p>\r\n                        <p>{contents.url}</p>\r\n                    </div>\r\n            </div>\r\n        )\r\n        return answer;\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\nimport firebase from \"firebase\";\n\nimport List from './List.js'\nimport Control from './Control.js'\n\nimport './App.css';\n\nconst defaultPath = \"/onthesnow-self-made-questions\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Header />\n          <div>\n            <Switch>\n              <Route path={defaultPath} exact component={List} />\n              <Route path={defaultPath + \"/control\"} component={Control} />\n            </Switch>\n          </div>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header hero is-info is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">自作問題集</h1>\n          </div>\n          <Link to={defaultPath + \"/control\"}>\n            <button>control</button>\n          </Link>\n          <Link to={defaultPath}>\n            <button>list</button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content has-text-centered\">\n          2020 ©snow quartz\n          </div>\n      </div>\n    )\n  }\n}\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDOvPrCTOH1q6xwhvQlQpDX4BCgNx6JHD4\",\n  authDomain: \"self-made-questions.firebaseapp.com\",\n  databaseURL: \"https://self-made-questions.firebaseio.com\",\n  projectId: \"self-made-questions\",\n  storageBucket: \"self-made-questions.appspot.com\",\n  messagingSenderId: \"996121708938\",\n  appId: \"1:996121708938:web:a75824951877640f6e6073\",\n  measurementId: \"G-38GKMPYRY3\"\n};\n\nfirebase.initializeApp(firebaseConfig);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}