{"version":3,"sources":["List.js","Control.js","App.js","serviceWorker.js","index.js"],"names":["List","getJson","json","require","setState","state","handleJsonChange","bind","li","this","slice","push","contentsList","map","contents","index","key","question","className","React","Component","ListContents","props","flg","id","choices","answer","unit","list","choiceList","choice","no","onClick","openAnswer","comment","url","Control","App","path","exact","component","Header","to","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.38a6753d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class List extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            json: []\r\n        };\r\n        this.handleJsonChange = this.handleJsonChange.bind(this);\r\n    }\r\n\r\n    handleJsonChange(json) {\r\n        let li = this.state.json.slice();\r\n        li.push(json);\r\n        this.setState({ json: li })\r\n    }\r\n\r\n    contentsList() {\r\n        const contentsList = this.state.json.map((contents, index) => {\r\n            return (\r\n                <ListContents key={contents.question} contents={contents} index={index} />\r\n            );\r\n        });\r\n        return contentsList;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"contentsList\">\r\n                {this.contentsList()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.getJson();\r\n    }\r\n\r\n    getJson = () => {\r\n        const json = require(\"./contents.json\");\r\n        this.setState({\r\n            json: json\r\n        });\r\n    }\r\n}\r\n\r\nclass ListContents extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            flg: false,\r\n            contents: props.contents,\r\n            index: props.index\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { contents, index } = this.state\r\n        return (\r\n            <div className=\"contents content\" id={index}>\r\n                {this.question(contents, index)}\r\n                {this.choices(contents.choices)}\r\n                {this.answer(contents, index)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    question(contents, index) {\r\n        const question = (\r\n            <div className=\"question\">\r\n                <p><strong>問題{index + 1} ({contents.unit})</strong></p>\r\n                <p>{contents.question}</p>\r\n            </div>\r\n        )\r\n        return question;\r\n    }\r\n\r\n    choices(list) {\r\n        const choiceList = list.map((choice, index) => {\r\n            return (\r\n                <li key={index}>{choice.no}: {choice.choice}</li>\r\n            );\r\n        });\r\n        const choices = (\r\n            <div className=\"choices\">\r\n                <ul>{choiceList}</ul>\r\n            </div>\r\n        )\r\n\r\n        return choices\r\n    }\r\n\r\n    answer(contents, index) {\r\n        const flg = this.state.flg;\r\n\r\n        const answer = (\r\n            <div className=\"answer\">\r\n                <button className=\"button is-info\" onClick={() => { this.openAnswer() }}>回答</button>\r\n                {flg &&\r\n                    <div className=\"commentary\">\r\n                        <p>答え： {contents.answer}</p>\r\n                        <p>解説：<br />{contents.comment}</p>\r\n                        <p>{contents.url}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n        return answer;\r\n    }\r\n\r\n    openAnswer() {\r\n        const flg = this.state.flg;\r\n        this.setState({\r\n            flg: !flg\r\n        })\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Control extends React.Component {\r\n\r\n    render(){\r\n        return(\r\n            <div>control</div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom';\n\nimport List from './List.js'\nimport Control from './Control.js'\n\nimport './App.css';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Header />\n          <div>\n            <Switch>\n              <Route path={\"/onthesnow-self-made-questions\"} exact component={List} />\n              <Route path={\"/control\"} component={Control} />\n            </Switch>\n          </div>\n          <Footer />\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header hero is-info is-bold\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <h1 className=\"title\">自作問題集</h1>\n          </div>\n          <Link to=\"/control\">\n            <button>control</button>\n          </Link>\n          <Link to=\"/onthesnow-self-made-questions\">\n            <button>list</button>\n          </Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"content has-text-centered\">\n          2020 ©snow quartz\n          </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}